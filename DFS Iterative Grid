#include <iostream>
#include<bits/stdc++.h>
using namespace std;

vector<vector<char>> v;
vector<vector<int>> visited;
int cnt=0;
bool isvalid(int row,int col,int n)
{
    if(row>n || col>n || row<1 || col<1)
        return false;
    else
        return true;
}
void dfs(int row,int col,int n)
{
    while(isvalid(row,col,n))
    {
        if(v[row][col]=='R')
        {
            if(isvalid(row,col+1,n))
                col+=1;
            else
                break;
        }else if(v[row][col]=='L')
        {
            if(isvalid(row,col-1,n))
                col-=1;
            else
                break;
        }else if(v[row][col]=='D')
        {
            if(isvalid(row+1,col,n))
                row+=1;
            else
                break;
        }
    }
    if(!((row+col)&1))
    {
        cnt++;
    }
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        v.resize(n+1);
        visited.resize(n+1);
        for(int i=1;i<=n;i++)
        {
            v[i].resize(n+1);
            visited[i].resize(n+1);
            for(int j=1;j<=n;j++)
            {
                char x;
                cin>>x;
                v[i][j]=x;
            }
        }
        for(int j=1;j<=n;j++)
        {
            dfs(1,j,n);
        }
        cout<<cnt<<endl;
        cnt=0;
    }
}
